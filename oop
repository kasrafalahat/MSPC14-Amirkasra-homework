from abc import ABC, abstractmethod

class Animal(ABC):
    def __init__(self, name: str, age: int):
        self._name = name         
        self._age = age

    @abstractmethod
    def make_sound(self):
        pass

    def feed(self):
        print(f"{self._name} has been fed.")

    def get_name(self):
        return self._name


class Cow(Animal):
    def make_sound(self):
        print(f"{self._name} says Moo!")

    def milk(self):
        print(f"{self._name} was milked.")

class Chicken(Animal):
    def make_sound(self):
        print(f"{self._name} says Cluck!")

    def lay_egg(self):
        print(f"{self._name} laid an egg.")

class Sheep(Animal):
    def make_sound(self):
        print(f"{self._name} says Baa!")

    def shear(self):
        print(f"{self._name} was sheared.")

class FarmStructure:
    def __init__(self, name: str, type_: str):
        self.name = name
        self.type = type_

    def describe(self):
        print(f"Structure: {self.name}, Type: {self.type}")


class Farm:
    def __init__(self):
        self._animals = []         # encapsulated animal list
        self._structures = []

    def add_animal(self, animal: Animal):
        self._animals.append(animal)
        print(f"{animal.get_name()} was added to the farm.")

    def remove_animal(self, animal: Animal):
        if animal in self._animals:
            self._animals.remove(animal)
            print(f"{animal.get_name()} was removed from the farm.")

    def add_structure(self, structure: FarmStructure):
        self._structures.append(structure)
        print(f"Structure {structure.name} was added to the farm.")

    def list_structures(self):
        print("Farm Structures:")
        for structure in self._structures:
            structure.describe()

    def show_population(self):
        print("Animal Population:")
        for animal in self._animals:
            print(f"- {animal.get_name()} ({animal.__class__.__name__})")

    def daily_routine(self):
        print("\n--- Daily Routine ---")
        for animal in self._animals:
            animal.feed()
            animal.make_sound()

            if isinstance(animal, Cow):
                animal.milk()
            elif isinstance(animal, Chicken):
                animal.lay_egg()
            elif isinstance(animal, Sheep):
                animal.shear()
